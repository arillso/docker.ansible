---
schemaVersion: "2.0.0"

commandTests:
    # Kubernetes Tools
    - name: "Check kubectl Version"
      command: "kubectl"
      args: ["version", "--client"]
      expectedOutput:
          - "Client Version"

    - name: "Check Helm Version"
      command: "helm"
      args: ["version", "--short"]
      expectedOutput:
          - "v3.18.4"

    - name: "Check kustomize Version"
      command: "kustomize"
      args: ["version"]
      expectedOutput:
          - "5.6.0"

    # Shell Tools & Utilities
    - name: "Check Bash Version"
      command: "bash"
      args: ["--version"]
      expectedOutput:
          - "GNU bash"

    - name: "Check jq Version"
      command: "jq"
      args: ["--version"]
      expectedOutput:
          - "jq-1.8.0"

    - name: "Check sshpass Availability"
      command: "which"
      args: ["sshpass"]
      expectedOutput:
          - "/usr/bin/sshpass"

    - name: "Check OpenSSL Version"
      command: "openssl"
      args: ["version"]
      expectedOutput:
          - "OpenSSL 3.5.1"

    - name: "Check Git Version"
      command: "git"
      args: ["--version"]
      expectedOutput:
          - "git version"

    # Python Symlink Test
    - name: "Check python Symlink"
      command: "readlink"
      args: ["-f", "/usr/bin/python"]
      expectedOutput:
          - "/usr/bin/python3"

    # Ansible Tools
    - name: "Check ansible-playbook Version"
      command: "ansible-playbook"
      args: ["--version"]
      expectedOutput:
          - "ansible-playbook"

    - name: "Check ansible Version"
      command: "ansible"
      args: ["--version"]
      expectedOutput:
          - "ansible"

    # User and UID Tests
    - name: "Check if container is running as user 'ansible'"
      command: "whoami"
      expectedOutput:
          - "ansible"

    - name: "Check if UID is 1000"
      command: "id"
      args: ["-u"]
      expectedOutput:
          - "1000"

    # PATH Test
    - name: "Check if PATH contains /pipx/bin"
      command: "printenv"
      args: ["PATH"]
      expectedOutput:
          - ".*\\/pipx\\/bin.*"

    # Example for Setup/Teardown
    - name: "Create temporary file and verify content"
      setup:
          - ["touch", "/tmp/testfile"]
          - ["sh", "-c", "echo hello world > /tmp/testfile"]
      command: "cat"
      args: ["/tmp/testfile"]
      expectedOutput:
          - "hello world"
      teardown:
          - ["rm", "-f", "/tmp/testfile"]

    - name: "Helm Template Functionality"
      setup:
          - - sh
            - -c
            - mkdir -p /tmp/helm-test/templates
          - - sh
            - -c
            - |
                echo 'apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: {{ .Release.Name }}-config' > /tmp/helm-test/templates/configmap.yaml
          - - sh
            - -c
            - |
                echo 'name: test-chart
                version: 1.0.0
                appVersion: 1.0.0' > /tmp/helm-test/Chart.yaml

      command: "helm"
      args: ["template", "release-name", "/tmp/helm-test"]
      expectedOutput:
          - "apiVersion: v1"
          - "kind: ConfigMap"
          - "name: release-name-config"
      teardown:
          - ["rm", "-rf", "/tmp/helm-test"]

    # Mitogen Configuration Tests
    - name: "Check Mitogen Strategy in ansible.cfg"
      command: "grep"
      args: ["strategy = mitogen_linear", "/etc/ansible/ansible.cfg"]
      expectedOutput:
          - "strategy = mitogen_linear"

    - name: "Check Mitogen Strategy Plugins Path"
      command: "grep"
      args: ["strategy_plugins", "/etc/ansible/ansible.cfg"]
      expectedOutput:
          - "strategy_plugins = /pipx/venvs/ansible/lib/python3.12/site-packages/ansible_mitogen/plugins/strategy"

    - name: "Verify Mitogen Module Installation"
      command: "/pipx/venvs/ansible/bin/python3"
      args: ["-c", "import ansible_mitogen; print('Mitogen available')"]
      expectedOutput:
          - "Mitogen available"

    # Ansible Configuration Tests
    - name: "Check YAML Inventory File Exists"
      command: "test"
      args: ["-f", "/etc/ansible/hosts.yml"]

    - name: "Check YAML Inventory Contains localhost" # DevSkim: ignore DS162092 - localhost is valid in Ansible inventory
      command: "grep"
      args: ["localhost:", "/etc/ansible/hosts.yml"] # DevSkim: ignore DS162092 - localhost is valid in Ansible inventory
      expectedOutput:
          - "localhost:" # DevSkim: ignore DS162092 - localhost is valid in Ansible inventory

    - name: "Check YAML Inventory ansible_connection"
      command: "grep"
      args: ["ansible_connection: local", "/etc/ansible/hosts.yml"]
      expectedOutput:
          - "ansible_connection: local"

    - name: "Check ansible.cfg Inventory Setting"
      command: "grep"
      args: ["inventory = /etc/ansible/hosts.yml", "/etc/ansible/ansible.cfg"]
      expectedOutput:
          - "inventory = /etc/ansible/hosts.yml"

fileExistenceTests:
    - name: "Check Python Dependencies"
      path: "/pipx/venvs/ansible/lib/python3.12/site-packages"
      shouldExist: true

    - name: "Check Security-Related Files"
      path: "/etc/ssl/certs/ca-certificates.crt"
      shouldExist: true

    - name: "Ansible Configuration Directory"
      path: "/etc/ansible"
      shouldExist: true
      permissions: "drwxr-xr-x"
      uid: 0
      gid: 0

    - name: "Check for Missing Typical Root Files"
      path: "/root/.bash_history"
      shouldExist: false

    - name: "Check if /etc/ansible/hosts.yml exists"
      path: "/etc/ansible/hosts.yml"
      shouldExist: true

    - name: "Check if /pipx/bin exists"
      path: "/pipx/bin"
      shouldExist: true

    - name: "Check /data Directory"
      path: "/data"
      shouldExist: true
      permissions: "drwxr-xr-x"

    - name: "Check .gnupg Directory"
      path: "/home/ansible/.gnupg"
      shouldExist: true
      permissions: "drwx------"

    - name: "Check .ssh Directory"
      path: "/home/ansible/.ssh"
      shouldExist: true
      permissions: "drwx------"

    - name: "Check Alpine release file exists"
      path: "/etc/alpine-release"
      shouldExist: true

fileContentTests:
    - name: "Verify Alpine version"
      path: "/etc/alpine-release"
      expectedContents:
          - "3.22.1"
    - name: "Check SSH Client Configuration"
      path: "/etc/ssh/ssh_config"
      excludedContents:
          - "UseRoaming yes"

    - name: "Check Ansible Hosts YAML File"
      path: "/etc/ansible/hosts.yml"
      expectedContents:
          - "localhost:" # DevSkim: ignore DS162092
          - "ansible_connection: local"

metadataTest:
    labels:
        - key: "org.opencontainers.image.vendor"
          value: "arillso"
        - key: "org.opencontainers.image.licenses"
          value: "MIT"
    envVars:
        - key: "USER"
          value: "ansible"
        - key: "UID"
          value: "1000"
        - key: "ANSIBLE_FORCE_COLOR"
          value: "True"
    cmd: ["ansible-playbook", "--version"]
    workdir: "/home/ansible"
    user: "ansible"
