name: Comprehensive Container Testing

on:
    push:
        branches: [main]
        paths:
            - ".github/workflows/comprehensive-test.yml"
            - "requirements.txt"
            - "Dockerfile"
    pull_request:
        branches: [main]
        paths:
            - ".github/workflows/comprehensive-test.yml"
            - "requirements.txt"
            - "Dockerfile"
    schedule:
        - cron: "0 1 * * 3"

permissions:
    contents: read
    security-events: write
    actions: read

jobs:
    structure-test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Extract Ansible Version
              id: get_version
              run: |
                  version=$(grep '^ansible-core==' requirements.txt | cut -d'=' -f3)
                  echo "version=$version" >> "$GITHUB_OUTPUT"

            - name: Docker Setup
              uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

            - name: Build Container
              uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
              with:
                  context: .
                  build-args: ANSIBLE_VERSION=${{ steps.get_version.outputs.version }}
                  push: false
                  load: true
                  tags: ansible:test

            - name: Run Structure Tests
              run: |
                  docker run --rm \
                    -v "$GITHUB_WORKSPACE/tests/structure/container-test.yml:/structure-test.yaml" \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    ghcr.io/googlecontainertools/container-structure-test:1.19.3 \
                    test --image=ansible:test --config=/structure-test.yaml

    security-test:
        runs-on: ubuntu-latest
        needs: structure-test
        steps:
            - name: Checkout Code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Setup Docker
              uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

            - name: Build Container
              uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
              with:
                  context: .
                  push: false
                  load: true
                  tags: ansible:test

            - name: Run Security Checks
              run: |
                  mkdir -p test-results
                  docker run --rm -v "$GITHUB_WORKSPACE/tests/security:/tests" ansible:test \
                  bash -c "bash /tests/container-hardening.sh || echo 'Security check returned warnings' > /dev/stderr" | tee test-results/security-check.log

            - name: Trivy Vulnerability Scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: "ansible:test"
                  format: "sarif"
                  output: "trivy-results.sarif"
                  severity: "CRITICAL,HIGH"

            - name: Upload Trivy scan results
              uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3
              with:
                  sarif_file: "trivy-results.sarif"

            - name: Upload Security Results
              uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              with:
                  name: security-results
                  path: test-results/

    performance-test:
        runs-on: ubuntu-latest
        needs: structure-test
        steps:
            - name: Checkout Code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Setup Docker
              uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

            - name: Build Container
              uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
              with:
                  context: .
                  push: false
                  load: true
                  tags: ansible:test

            - name: Prepare Test Results Directory
              run: |
                  mkdir -p test-results
                  chmod 777 test-results

            - name: Run Performance Tests
              run: |
                  docker run --rm \
                    -v "$GITHUB_WORKSPACE/tests/performance:/tests" \
                    -v "$GITHUB_WORKSPACE/test-results:/results" \
                    ansible:test sh -c "mkdir -p /results && sh /tests/run-performance-tests.sh"

            - name: Upload Performance Results
              uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              with:
                  name: performance-results
                  path: test-results/

    integration-test:
        runs-on: ubuntu-latest
        needs: structure-test
        steps:
            - name: Checkout Code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Setup Docker
              uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

            - name: Build Container
              uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
              with:
                  context: .
                  push: false
                  load: true
                  tags: ansible:test

            - name: Create Docker Network
              run: docker network create ansible-test-network

            - name: Start Test Services
              run: docker compose -f tests/integration/docker-compose.yml up -d

            - name: Prepare Test Results Directory
              run: |
                  mkdir -p test-results
                  chmod 777 test-results

            - name: Run Integration Tests
              run: |
                  docker run --rm --network ansible-test-network \
                    -v "$GITHUB_WORKSPACE/tests/integration:/tests" \
                    -v "$GITHUB_WORKSPACE/test-results:/results" \
                    ansible:test bash /tests/run-integration-tests.sh

            - name: Cleanup Services
              if: always()
              run: |
                  docker compose -f tests/integration/docker-compose.yml down
                  docker network rm ansible-test-network || true

    unit-test:
        runs-on: ubuntu-latest
        needs: structure-test
        steps:
            - name: Checkout Code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Setup Python
              uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
              with:
                  python-version: "3.13.3"

            - name: Install Test Dependencies
              run: |
                  pip install pytest pytest-cov

            - name: Build Container
              uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
              with:
                  context: .
                  push: false
                  load: true
                  tags: ansible:test

            - name: Run Unit Tests
              run: |
                  ANSIBLE_IMAGE="ansible:test" python -m pytest tests/unit/test_ansible_container.py -v

    upgrade-test:
        runs-on: ubuntu-latest
        needs: structure-test
        steps:
            - name: Checkout Code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Setup Docker
              uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

            - name: Build Container
              uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
              with:
                  context: .
                  push: false
                  load: true
                  tags: ansible:test

            - name: Run Upgrade Tests
              run: |
                  ANSIBLE_IMAGE=ansible:test bash tests/upgrade/test-upgrade.sh || (echo "Some upgrade tests failed, but continuing"; exit 0)

    final-validation:
        runs-on: ubuntu-latest
        needs:
            [
                security-test,
                performance-test,
                integration-test,
                unit-test,
                upgrade-test,
            ]
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        steps:
            - name: Checkout Code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Extract Version Info
              id: get_version
              run: |
                  version=$(grep '^ansible-core==' requirements.txt | cut -d'=' -f3)
                  echo "version=$version" >> "$GITHUB_OUTPUT"

            - name: Docker Meta
              id: meta
              uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
              with:
                  images: |
                      ansible-test
                  tags: |
                      type=raw,value=test
                      type=raw,value=${{ steps.get_version.outputs.version }}
                      type=sha

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

            - name: Build Final Test Image
              uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
              with:
                  context: .
                  build-args: |
                      ANSIBLE_VERSION=${{ steps.get_version.outputs.version }}
                      VCS_REF=${{ github.sha }}
                      BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
                  push: false
                  load: true
                  tags: ${{ steps.meta.outputs.tags }}

            - name: Comprehensive Deployment Test
              run: |
                  tests/structure/run-deployment-test.sh ${{ steps.get_version.outputs.version }}

            - name: Publish Test Status
              id: test_status
              run: |
                  echo "status=success" >> "$GITHUB_OUTPUT"
